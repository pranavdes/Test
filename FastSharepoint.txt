// =================================================================================
// BASIC FAST SHAREPOINT LIST FUNCTION
// =================================================================================
// Usage: GetSharePointListFast("https://company.sharepoint.com/sites/MyProject", "TaskList", "Status eq 'Active'", {"ID","Title","Status","DueDate"}, 5000)

(siteUrl as text, listName as text, optional filter as text, optional selectColumns as list, optional topCount as number) as table =>
let
    // Set default values
    FilterClause = if filter = null then "" else "&$filter=" & filter,
    SelectClause = if selectColumns = null then "" else "&$select=" & Text.Combine(selectColumns, ","),
    TopClause = if topCount = null then "" else "&$top=" & Text.From(topCount),
    
    // Clean site URL (remove trailing slash if present)
    CleanSiteUrl = if Text.EndsWith(siteUrl, "/") then Text.RemoveRange(siteUrl, Text.Length(siteUrl)-1) else siteUrl,
    
    // Build OData URL
    ODataUrl = CleanSiteUrl & "/_api/web/lists/getbytitle('" & listName & "')/items?" &
               "$orderby=Created desc" & 
               FilterClause & 
               SelectClause & 
               TopClause,
    
    // Execute OData query with error handling
    Source = try OData.Feed(
        ODataUrl,
        null,
        [
            Implementation = "2.0",
            Timeout = #duration(0,0,5,0),
            Headers = [Accept = "application/json;odata=nometadata"]
        ]
    ) otherwise error "Failed to connect to SharePoint list: " & listName & " at " & siteUrl,
    
    // Handle potential errors in the result
    Result = if Source[HasError]? = true then 
                error "SharePoint query failed: " & Source[Error][Message] 
             else 
                Source
in
    Result,

// =================================================================================
// ENHANCED SHAREPOINT LIST FUNCTION WITH RETRY LOGIC
// =================================================================================
// Usage: GetSharePointListAdvanced("https://company.sharepoint.com/sites/MyProject", "TaskList", "Status eq 'Active'", {"ID","Title","Status","DueDate"}, 5000, 30, "Created")

GetSharePointListAdvanced = (siteUrl as text, listName as text, optional filter as text, optional selectColumns as list, optional topCount as number, optional daysSince as number, optional orderByField as text) as table =>
let
    // Set default values
    DefaultDays = if daysSince = null then 365 else daysSince,
    DefaultOrderBy = if orderByField = null then "Created" else orderByField,
    
    // Build date filter for recent items
    DateFilter = if daysSince = null then "" else 
        DefaultOrderBy & " ge datetime'" & DateTime.ToText(Date.AddDays(DateTime.LocalNow(), -DefaultDays), "yyyy-MM-ddTHH:mm:ss") & "'",
    
    // Combine filters
    CombinedFilter = if filter = null and DateFilter = "" then ""
                    else if filter = null then DateFilter
                    else if DateFilter = "" then filter
                    else "(" & filter & ") and (" & DateFilter & ")",
    
    FilterClause = if CombinedFilter = "" then "" else "&$filter=" & CombinedFilter,
    SelectClause = if selectColumns = null then "" else "&$select=" & Text.Combine(selectColumns, ","),
    TopClause = if topCount = null then "" else "&$top=" & Text.From(topCount),
    
    // Clean site URL
    CleanSiteUrl = if Text.EndsWith(siteUrl, "/") then Text.RemoveRange(siteUrl, Text.Length(siteUrl)-1) else siteUrl,
    
    // Build OData URL
    ODataUrl = CleanSiteUrl & "/_api/web/lists/getbytitle('" & listName & "')/items?" &
               "$orderby=" & DefaultOrderBy & " desc" & 
               FilterClause & 
               SelectClause & 
               TopClause,
    
    // Retry logic function
    TryGetWithRetry = (retryCount as number) as any =>
    let
        Attempt = try OData.Feed(
            ODataUrl,
            null,
            [
                Implementation = "2.0",
                Timeout = #duration(0,0,5,0),
                Headers = [Accept = "application/json;odata=nometadata"]
            ]
        )
    in
        if Attempt[HasError] = false then
            Attempt[Value]
        else if retryCount < 3 then
            let
                WaitTime = Number.Power(2, retryCount),
                Wait = Function.InvokeAfter(() => TryGetWithRetry(retryCount + 1), #duration(0,0,0,WaitTime))
            in
                Wait
        else
            error "SharePoint connection failed after 3 attempts. List: " & listName & " | Error: " & Attempt[Error][Message],
    
    // Execute with retry
    Result = TryGetWithRetry(0)
in
    Result,

// =================================================================================
// USAGE EXAMPLES
// =================================================================================

// Example 1: Basic usage - get all active tasks
BasicExample = GetSharePointListFast(
    "https://contoso.sharepoint.com/sites/ProjectSite", 
    "TaskList", 
    "Status eq 'Active'", 
    {"ID", "Title", "Status", "DueDate", "AssignedTo"}, 
    1000
),

// Example 2: Advanced usage with date filtering
AdvancedExample = GetSharePointListAdvanced(
    "https://contoso.sharepoint.com/sites/ProjectSite", 
    "ProjectTracker", 
    "Priority eq 'High'", 
    {"ID", "Title", "ProjectManager", "Status", "Budget"}, 
    500, 
    90,  // Last 90 days
    "Modified"  // Order by Modified date
),

// Example 3: No filtering, just recent items
RecentItemsExample = GetSharePointListAdvanced(
    "https://contoso.sharepoint.com/sites/ProjectSite", 
    "DocumentLibrary", 
    null,  // No additional filter
    null,  // All columns
    100,   // Top 100 items
    30,    // Last 30 days
    "Created"
)
