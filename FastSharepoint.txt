// GetSharePointListFast Function
// Create this as a separate query/function in Power BI
// Usage: GetSharePointListFast("https://company.sharepoint.com/sites/MyProject", "TaskList", "Status eq 'Active'", {"ID","Title","Status","DueDate"}, 5000)

(siteUrl as text, listName as text, optional filter as text, optional selectColumns as list, optional topCount as number) as table =>
let
    // Set default values
    FilterClause = if filter = null then "" else "&$filter=" & filter,
    SelectClause = if selectColumns = null then "" else "&$select=" & Text.Combine(selectColumns, ","),
    TopClause = if topCount = null then "" else "&$top=" & Text.From(topCount),
    
    // Clean site URL (remove trailing slash if present)
    CleanSiteUrl = if Text.EndsWith(siteUrl, "/") then Text.RemoveRange(siteUrl, Text.Length(siteUrl)-1) else siteUrl,
    
    // Build OData URL
    ODataUrl = CleanSiteUrl & "/_api/web/lists/getbytitle('" & listName & "')/items?" &
               "$orderby=Created desc" & 
               FilterClause & 
               SelectClause & 
               TopClause,
    
    // Execute OData query with error handling
    Source = try OData.Feed(
        ODataUrl,
        null,
        [
            Implementation = "2.0",
            Timeout = #duration(0,0,5,0),
            Headers = [Accept = "application/json;odata=nometadata"]
        ]
    ) otherwise error "Failed to connect to SharePoint list: " & listName & " at " & siteUrl
in
    Source

// GetSharePointListAdvanced Function - Fixed Version
// Create this as a separate query/function in Power BI
// Usage: GetSharePointListAdvanced("https://company.sharepoint.com/sites/MyProject", "TaskList", "Status eq 'Active'", {"ID","Title","Status","DueDate"}, 5000, 30, "Created")

(siteUrl as text, listName as text, optional filter as text, optional selectColumns as list, optional topCount as number, optional daysSince as number, optional orderByField as text) as table =>
let
    // Set default values
    DefaultDays = if daysSince = null then 365 else daysSince,
    DefaultOrderBy = if orderByField = null then "Created" else orderByField,
    
    // Build date filter for recent items
    DateFilter = if daysSince = null then "" else 
        DefaultOrderBy & " ge datetime'" & DateTime.ToText(Date.AddDays(DateTime.LocalNow(), -DefaultDays), "yyyy-MM-ddTHH:mm:ss") & "'",
    
    // Combine filters
    CombinedFilter = if filter = null and DateFilter = "" then ""
                    else if filter = null then DateFilter
                    else if DateFilter = "" then filter
                    else "(" & filter & ") and (" & DateFilter & ")",
    
    FilterClause = if CombinedFilter = "" then "" else "&$filter=" & CombinedFilter,
    SelectClause = if selectColumns = null then "" else "&$select=" & Text.Combine(selectColumns, ","),
    TopClause = if topCount = null then "" else "&$top=" & Text.From(topCount),
    
    // Clean site URL
    CleanSiteUrl = if Text.EndsWith(siteUrl, "/") then Text.RemoveRange(siteUrl, Text.Length(siteUrl)-1) else siteUrl,
    
    // Build OData URL
    ODataUrl = CleanSiteUrl & "/_api/web/lists/getbytitle('" & listName & "')/items?" &
               "$orderby=" & DefaultOrderBy & " desc" & 
               FilterClause & 
               SelectClause & 
               TopClause,
    
    // Simple retry logic - try 3 times with different timeouts
    Attempt1 = try OData.Feed(
        ODataUrl,
        null,
        [
            Implementation = "2.0",
            Timeout = #duration(0,0,2,0),
            Headers = [Accept = "application/json;odata=nometadata"]
        ]
    ),
    
    Attempt2 = if Attempt1[HasError] = false then Attempt1 else
        try OData.Feed(
            ODataUrl,
            null,
            [
                Implementation = "2.0",
                Timeout = #duration(0,0,5,0),
                Headers = [Accept = "application/json;odata=nometadata"]
            ]
        ),
    
    Attempt3 = if Attempt2[HasError] = false then Attempt2 else
        try OData.Feed(
            ODataUrl,
            null,
            [
                Implementation = "2.0",
                Timeout = #duration(0,0,10,0),
                Headers = [Accept = "application/json;odata=nometadata"]
            ]
        ),
    
    // Final result with error handling
    Result = if Attempt3[HasError] = false then 
                Attempt3[Value] 
             else 
                error "SharePoint connection failed after 3 attempts. List: " & listName & " | URL: " & ODataUrl & " | Error: " & Attempt3[Error][Message]
in
    Result


// Fastest implentation
(tenant_name,site_name,list_name)=>
let
    tenantname = tenant_name,
    sitename = site_name, // if a subsite use "Site/SubSite"
    listname = list_name,
    baseurl = "https://" & tenantname & "/sites/" & sitename & "/_api/web/lists/GetByTitle('" & listname & "')/",
    itemcount = Json.Document(Web.Contents(baseurl&"ItemCount", [Headers=[Accept="application/json"]]))[value],
    skiplist = List.Numbers(0, Number.RoundUp(itemcount/5000), 5000),
    #"Converted to Table" = Table.FromList(skiplist, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
    #"Renamed Columns" = Table.RenameColumns(#"Converted to Table",{{"Column1", "Skip"}}),
    #"Changed Type" = Table.TransformColumnTypes(#"Renamed Columns",{{"Skip", type text}}),
    fieldselect = "&$top=5000", // all fields with no expansion
    //fieldselect = "&$top=5000&$select = Id,Title,Person,Date", // list desired fields (no expansion)
    //fieldselect = "&$top=5000&$select = Id,Title,Person/LastName,Person/FirstName,Date&$expand = Person", //expand list fields
    #"Added Custom" = Table.AddColumn(#"Changed Type", "Items", each Json.Document(Web.Contents(baseurl& "/items?$skipToken=Paged=TRUE%26p_ID=" & [Skip] & fieldselect, [Headers=[Accept="application/json"]]))),
    #"Expanded Items" = Table.ExpandRecordColumn(#"Added Custom", "Items", {"value"}, {"value"}),
    #"Expanded value" = Table.ExpandListColumn(#"Expanded Items", "value")
    
in
    #"Expanded value"

// =================================================================================
// ENHANCED SHAREPOINT FUNCTION WITH AUTOMATIC PAGINATION
// =================================================================================
// Fastest SharePoint data loading with automatic handling of >5000 records
// Usage: GetSharePointListUltraFast("https://tenant.sharepoint.com/sites/sitename", "ListName", "Status eq 'Active'", {"ID","Title","Status"}, null, 5000)

GetSharePointListUltraFast = (siteUrl as text, listName as text, optional filter as text, optional selectColumns as list, optional expandColumns as list, optional pageSize as number) as table =>
let
    // Set defaults
    DefaultPageSize = if pageSize = null then 5000 else pageSize,
    
    // Parse the site URL to extract components
    CleanSiteUrl = if Text.EndsWith(siteUrl, "/") then Text.RemoveRange(siteUrl, Text.Length(siteUrl)-1) else siteUrl,
    
    // Build base API URL
    BaseUrl = CleanSiteUrl & "/_api/web/lists/GetByTitle('" & listName & "')/",
    
    // Build filter clause
    FilterClause = if filter = null then "" else "&$filter=" & filter,
    
    // Build select clause
    SelectClause = if selectColumns = null then "" 
                  else "&$select=" & Text.Combine(selectColumns, ",") & 
                       (if expandColumns = null then "" else "," & Text.Combine(expandColumns, ",")),
    
    // Build expand clause  
    ExpandClause = if expandColumns = null then "" else "&$expand=" & Text.Combine(expandColumns, ","),
    
    // Combine all field specifications
    FieldSelect = "&$top=" & Text.From(DefaultPageSize) & FilterClause & SelectClause & ExpandClause,
    
    // Get total item count (with filter applied if provided)
    ItemCountUrl = BaseUrl & "ItemCount" & (if filter = null then "" else "?$filter=" & filter),
    ItemCount = Json.Document(Web.Contents(ItemCountUrl, [Headers=[Accept="application/json"]]))[value],
    
    // Calculate pagination - only if more than pageSize records
    Result = if ItemCount <= DefaultPageSize then
        // Single page - no pagination needed
        let
            SinglePageUrl = BaseUrl & "items?" & Text.RemoveRange(FieldSelect, 0, 1), // Remove leading &
            SinglePageData = Json.Document(Web.Contents(SinglePageUrl, [Headers=[Accept="application/json"]])),
            SinglePageTable = Table.FromRecords(SinglePageData[value])
        in
            SinglePageTable
    else
        // Multi-page - use pagination
        let
            // Create skip list for pagination
            SkipList = List.Numbers(0, Number.RoundUp(ItemCount/DefaultPageSize), DefaultPageSize),
            SkipTable = Table.FromList(SkipList, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
            RenamedSkipTable = Table.RenameColumns(SkipTable, {{"Column1", "Skip"}}),
            SkipTableTyped = Table.TransformColumnTypes(RenamedSkipTable, {{"Skip", type text}}),
            
            // Add column with paginated data
            PaginatedData = Table.AddColumn(SkipTableTyped, "Items", each 
                Json.Document(Web.Contents(BaseUrl & "items?$skipToken=Paged=TRUE%26p_ID=" & [Skip] & FieldSelect, 
                [Headers=[Accept="application/json"]]))
            ),
            
            // Expand the nested data
            ExpandedItems = Table.ExpandRecordColumn(PaginatedData, "Items", {"value"}, {"value"}),
            ExpandedValues = Table.ExpandListColumn(ExpandedItems, "value"),
            
            // Remove the Skip column to clean up
            CleanedData = Table.RemoveColumns(ExpandedValues, {"Skip"})
        in
            CleanedData
in
    Result,

// =================================================================================
// SIMPLIFIED VERSION FOR YOUR DATE FILTERING USE CASE
// =================================================================================

GetSharePointListWithDateFilter = (siteUrl as text, listName as text, dateFieldName as text, monthsBack as number, optional additionalFilter as text, optional selectColumns as list) as table =>
let
    // Calculate date filter
    MonthsAgoDate = Date.AddMonths(DateTime.Date(DateTime.LocalNow()), -monthsBack),
    DateFilterFormatted = DateTime.ToText(DateTime.From(MonthsAgoDate), "yyyy-MM-ddTHH:mm:ss") & "Z",
    
    // Encode field name for SharePoint API (spaces become _x0020_)
    EncodedFieldName = Text.Replace(Text.Replace(dateFieldName, " ", "_x0020_"), "'", "_x0027_"),
    
    // Build date filter
    DateFilter = EncodedFieldName & " ge datetime'" & DateFilterFormatted & "'",
    
    // Combine with additional filter if provided
    CombinedFilter = if additionalFilter = null then DateFilter 
                    else DateFilter & " and (" & additionalFilter & ")",
    
    // Call the main function
    Result = GetSharePointListUltraFast(siteUrl, listName, CombinedFilter, selectColumns, null, 5000)
in
    Result,

// =================================================================================
// BATCH PROCESSING VERSION FOR EXTREMELY LARGE DATASETS
// =================================================================================

GetSharePointListBatched = (siteUrl as text, listName as text, optional filter as text, optional selectColumns as list, optional batchSize as number) as table =>
let
    DefaultBatchSize = if batchSize = null then 2000 else batchSize, // Smaller batches for stability
    
    CleanSiteUrl = if Text.EndsWith(siteUrl, "/") then Text.RemoveRange(siteUrl, Text.Length(siteUrl)-1) else siteUrl,
    BaseUrl = CleanSiteUrl & "/_api/web/lists/GetByTitle('" & listName & "')/",
    
    // Get total count
    ItemCountUrl = BaseUrl & "ItemCount" & (if filter = null then "" else "?$filter=" & filter),
    ItemCount = Json.Document(Web.Contents(ItemCountUrl, [Headers=[Accept="application/json"]]))[value],
    
    // Build field selection
    SelectClause = if selectColumns = null then "" else "&$select=" & Text.Combine(selectColumns, ","),
    FilterClause = if filter = null then "" else "&$filter=" & filter,
    
    // Create batch ranges
    BatchCount = Number.RoundUp(ItemCount / DefaultBatchSize),
    BatchRanges = List.Generate(
        () => 0,
        each _ < BatchCount,
        each _ + 1,
        each [
            Skip = _ * DefaultBatchSize,
            BatchNumber = _ + 1
        ]
    ),
    
    // Function to get one batch
    GetBatch = (batchInfo as record) as table =>
        let
            BatchUrl = BaseUrl & "items?$skipToken=Paged=TRUE%26p_ID=" & Text.From(batchInfo[Skip]) & 
                      "&$top=" & Text.From(DefaultBatchSize) & FilterClause & SelectClause,
            
            BatchData = try Json.Document(Web.Contents(BatchUrl, [Headers=[Accept="application/json"]])) 
                       otherwise [value = {}],
            
            BatchTable = Table.FromRecords(BatchData[value])
        in
            BatchTable,
    
    // Get all batches
    AllBatches = List.Transform(BatchRanges, GetBatch),
    CombinedData = Table.Combine(AllBatches)
in
    CombinedData,

// =================================================================================
// USAGE EXAMPLES
// =================================================================================

// Example 1: Your specific date filtering case (15 months of data)
YourDateExample = GetSharePointListWithDateFilter(
    "https://yourcompany.sharepoint.com/sites/ProjectSite",
    "YourListName",
    "AV Monthend Date",  // Your date field name
    15,  // Last 15 months
    "Status ne 'Archived'",  // Additional filter (optional)
    {"ID", "Title", "AV Monthend Date", "Status", "Amount"}  // Select specific columns
),

// Example 2: Large dataset with automatic pagination
LargeDatasetExample = GetSharePointListUltraFast(
    "https://yourcompany.sharepoint.com/sites/ProjectSite",
    "TransactionHistory",
    "TransactionDate ge datetime'2023-01-01T00:00:00Z'",  // Filter
    {"ID", "Title", "TransactionDate", "Amount", "Status"},  // Select columns
    null,  // No expand needed
    5000   // Page size
),

// Example 3: With lookup field expansion
ExpandedFieldExample = GetSharePointListUltraFast(
    "https://yourcompany.sharepoint.com/sites/ProjectSite", 
    "ProjectTasks",
    "Status eq 'Active'",
    {"ID", "Title", "AssignedTo/Title", "Category/Title", "DueDate"},  // Select with lookup fields
    {"AssignedTo", "Category"},  // Expand lookup fields
    3000
),

// Example 4: Batched processing for extremely large datasets
ExtremeLargeDataExample = GetSharePointListBatched(
    "https://yourcompany.sharepoint.com/sites/ProjectSite",
    "HistoricalData",
    "Year ge 2020",
    {"ID", "Title", "Date", "Value"},
    1000  // Smaller batch size for stability
),

// Example 5: Simple usage (no filtering, all data with auto-pagination)
SimpleAllDataExample = GetSharePointListUltraFast(
    "https://yourcompany.sharepoint.com/sites/ProjectSite",
    "SimpleList",
    null,  // No filter
    null,  // All columns
    null,  // No expansion
    5000   


// =================================================================================
// SHAREPOINT FIELD NAME DECODER
// =================================================================================

DecodeSharePointFieldName = (encodedName as text) as text =>
let
    // Common SharePoint field name encodings
    DecodingMap = {
        {"_x0020_", " "},        // Space
        {"_x0027_", "'"},        // Apostrophe
        {"_x0028_", "("},        // Left parenthesis
        {"_x0029_", ")"},        // Right parenthesis
        {"_x002d_", "-"},        // Hyphen
        {"_x002e_", "."},        // Period
        {"_x003a_", ":"},        // Colon
        {"_x003b_", ";"},        // Semicolon
        {"_x003c_", "<"},        // Less than
        {"_x003e_", ">"},        // Greater than
        {"_x003f_", "?"},        // Question mark
        {"_x0040_", "@"},        // At symbol
        {"_x005b_", "["},        // Left bracket
        {"_x005c_", "\"},        // Backslash
        {"_x005d_", "]"},        // Right bracket
        {"_x007b_", "{"},        // Left brace
        {"_x007c_", "|"},        // Pipe
        {"_x007d_", "}"},        // Right brace
        {"_x00a0_", " "},        // Non-breaking space
        {"_x0023_", "#"},        // Hash/pound
        {"_x0024_", "$"},        // Dollar sign
        {"_x0025_", "%"},        // Percent
        {"_x0026_", "&"},        // Ampersand
        {"_x002a_", "*"},        // Asterisk
        {"_x002b_", "+"},        // Plus
        {"_x002c_", ","},        // Comma
        {"_x002f_", "/"},        // Forward slash
        {"_x003d_", "="},        // Equals
        {"_x005e_", "^"},        // Caret
        {"_x0060_", "`"},        // Backtick
        {"_x007e_", "~"}         // Tilde
    },
    
    // Apply all decodings
    DecodedName = List.Accumulate(
        DecodingMap,
        encodedName,
        (current, mapping) => Text.Replace(current, mapping{0}, mapping{1})
    )
in
    DecodedName,

// =================================================================================
// ENHANCED SHAREPOINT FUNCTION WITH AUTOMATIC COLUMN DECODING
// =================================================================================

GetSharePointListUltraFastDecoded = (siteUrl as text, listName as text, optional filter as text, optional selectColumns as list, optional expandColumns as list, optional pageSize as number) as table =>
let
    // Set defaults
    DefaultPageSize = if pageSize = null then 5000 else pageSize,
    CleanSiteUrl = if Text.EndsWith(siteUrl, "/") then Text.RemoveRange(siteUrl, Text.Length(siteUrl)-1) else siteUrl,
    BaseUrl = CleanSiteUrl & "/_api/web/lists/GetByTitle('" & listName & "')/",
    
    // Build filter clause
    FilterClause = if filter = null then "" else "&$filter=" & filter,
    
    // Build select clause
    SelectClause = if selectColumns = null then "" 
                  else "&$select=" & Text.Combine(selectColumns, ",") & 
                       (if expandColumns = null then "" else "," & Text.Combine(expandColumns, ",")),
    
    // Build expand clause  
    ExpandClause = if expandColumns = null then "" else "&$expand=" & Text.Combine(expandColumns, ","),
    
    // Combine all field specifications
    FieldSelect = "&$top=" & Text.From(DefaultPageSize) & FilterClause & SelectClause & ExpandClause,
    
    // Get total item count
    ItemCountUrl = BaseUrl & "ItemCount" & (if filter = null then "" else "?$filter=" & filter),
    ItemCount = Json.Document(Web.Contents(ItemCountUrl, [Headers=[Accept="application/json"]]))[value],
    
    // Get the raw data (with encoded column names)
    RawData = if ItemCount <= DefaultPageSize then
        // Single page
        let
            SinglePageUrl = BaseUrl & "items?" & Text.RemoveRange(FieldSelect, 0, 1),
            SinglePageData = Json.Document(Web.Contents(SinglePageUrl, [Headers=[Accept="application/json"]])),
            SinglePageTable = Table.FromRecords(SinglePageData[value])
        in
            SinglePageTable
    else
        // Multi-page pagination
        let
            SkipList = List.Numbers(0, Number.RoundUp(ItemCount/DefaultPageSize), DefaultPageSize),
            SkipTable = Table.FromList(SkipList, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
            RenamedSkipTable = Table.RenameColumns(SkipTable, {{"Column1", "Skip"}}),
            SkipTableTyped = Table.TransformColumnTypes(RenamedSkipTable, {{"Skip", type text}}),
            
            PaginatedData = Table.AddColumn(SkipTableTyped, "Items", each 
                Json.Document(Web.Contents(BaseUrl & "items?$skipToken=Paged=TRUE%26p_ID=" & [Skip] & FieldSelect, 
                [Headers=[Accept="application/json"]]))
            ),
            
            ExpandedItems = Table.ExpandRecordColumn(PaginatedData, "Items", {"value"}, {"value"}),
            ExpandedValues = Table.ExpandListColumn(ExpandedItems, "value"),
            CleanedData = Table.RemoveColumns(ExpandedValues, {"Skip"})
        in
            CleanedData,
    
    // Decode all column names
    OriginalColumnNames = Table.ColumnNames(RawData),
    DecodedColumnNames = List.Transform(OriginalColumnNames, each DecodeSharePointFieldName(_)),
    
    // Create renaming pairs (only if names actually changed)
    RenamingPairs = List.Transform(
        List.Positions(OriginalColumnNames),
        each if OriginalColumnNames{_} <> DecodedColumnNames{_} 
             then {OriginalColumnNames{_}, DecodedColumnNames{_}}
             else null
    ),
    
    // Filter out null entries (columns that didn't need renaming)
    ActualRenamingPairs = List.RemoveNulls(RenamingPairs),
    
    // Apply column renaming
    FinalTable = if List.Count(ActualRenamingPairs) > 0 
                 then Table.RenameColumns(RawData, ActualRenamingPairs)
                 else RawData
in
    FinalTable,
