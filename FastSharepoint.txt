// GetSharePointListFast Function
// Create this as a separate query/function in Power BI
// Usage: GetSharePointListFast("https://company.sharepoint.com/sites/MyProject", "TaskList", "Status eq 'Active'", {"ID","Title","Status","DueDate"}, 5000)

(siteUrl as text, listName as text, optional filter as text, optional selectColumns as list, optional topCount as number) as table =>
let
    // Set default values
    FilterClause = if filter = null then "" else "&$filter=" & filter,
    SelectClause = if selectColumns = null then "" else "&$select=" & Text.Combine(selectColumns, ","),
    TopClause = if topCount = null then "" else "&$top=" & Text.From(topCount),
    
    // Clean site URL (remove trailing slash if present)
    CleanSiteUrl = if Text.EndsWith(siteUrl, "/") then Text.RemoveRange(siteUrl, Text.Length(siteUrl)-1) else siteUrl,
    
    // Build OData URL
    ODataUrl = CleanSiteUrl & "/_api/web/lists/getbytitle('" & listName & "')/items?" &
               "$orderby=Created desc" & 
               FilterClause & 
               SelectClause & 
               TopClause,
    
    // Execute OData query with error handling
    Source = try OData.Feed(
        ODataUrl,
        null,
        [
            Implementation = "2.0",
            Timeout = #duration(0,0,5,0),
            Headers = [Accept = "application/json;odata=nometadata"]
        ]
    ) otherwise error "Failed to connect to SharePoint list: " & listName & " at " & siteUrl
in
    Source

// GetSharePointListAdvanced Function - Fixed Version
// Create this as a separate query/function in Power BI
// Usage: GetSharePointListAdvanced("https://company.sharepoint.com/sites/MyProject", "TaskList", "Status eq 'Active'", {"ID","Title","Status","DueDate"}, 5000, 30, "Created")

(siteUrl as text, listName as text, optional filter as text, optional selectColumns as list, optional topCount as number, optional daysSince as number, optional orderByField as text) as table =>
let
    // Set default values
    DefaultDays = if daysSince = null then 365 else daysSince,
    DefaultOrderBy = if orderByField = null then "Created" else orderByField,
    
    // Build date filter for recent items
    DateFilter = if daysSince = null then "" else 
        DefaultOrderBy & " ge datetime'" & DateTime.ToText(Date.AddDays(DateTime.LocalNow(), -DefaultDays), "yyyy-MM-ddTHH:mm:ss") & "'",
    
    // Combine filters
    CombinedFilter = if filter = null and DateFilter = "" then ""
                    else if filter = null then DateFilter
                    else if DateFilter = "" then filter
                    else "(" & filter & ") and (" & DateFilter & ")",
    
    FilterClause = if CombinedFilter = "" then "" else "&$filter=" & CombinedFilter,
    SelectClause = if selectColumns = null then "" else "&$select=" & Text.Combine(selectColumns, ","),
    TopClause = if topCount = null then "" else "&$top=" & Text.From(topCount),
    
    // Clean site URL
    CleanSiteUrl = if Text.EndsWith(siteUrl, "/") then Text.RemoveRange(siteUrl, Text.Length(siteUrl)-1) else siteUrl,
    
    // Build OData URL
    ODataUrl = CleanSiteUrl & "/_api/web/lists/getbytitle('" & listName & "')/items?" &
               "$orderby=" & DefaultOrderBy & " desc" & 
               FilterClause & 
               SelectClause & 
               TopClause,
    
    // Simple retry logic - try 3 times with different timeouts
    Attempt1 = try OData.Feed(
        ODataUrl,
        null,
        [
            Implementation = "2.0",
            Timeout = #duration(0,0,2,0),
            Headers = [Accept = "application/json;odata=nometadata"]
        ]
    ),
    
    Attempt2 = if Attempt1[HasError] = false then Attempt1 else
        try OData.Feed(
            ODataUrl,
            null,
            [
                Implementation = "2.0",
                Timeout = #duration(0,0,5,0),
                Headers = [Accept = "application/json;odata=nometadata"]
            ]
        ),
    
    Attempt3 = if Attempt2[HasError] = false then Attempt2 else
        try OData.Feed(
            ODataUrl,
            null,
            [
                Implementation = "2.0",
                Timeout = #duration(0,0,10,0),
                Headers = [Accept = "application/json;odata=nometadata"]
            ]
        ),
    
    // Final result with error handling
    Result = if Attempt3[HasError] = false then 
                Attempt3[Value] 
             else 
                error "SharePoint connection failed after 3 attempts. List: " & listName & " | URL: " & ODataUrl & " | Error: " & Attempt3[Error][Message]
in
    Result


// Fastest implentation
(tenant_name,site_name,list_name)=>
let
    tenantname = tenant_name,
    sitename = site_name, // if a subsite use "Site/SubSite"
    listname = list_name,
    baseurl = "https://" & tenantname & "/sites/" & sitename & "/_api/web/lists/GetByTitle('" & listname & "')/",
    itemcount = Json.Document(Web.Contents(baseurl&"ItemCount", [Headers=[Accept="application/json"]]))[value],
    skiplist = List.Numbers(0, Number.RoundUp(itemcount/5000), 5000),
    #"Converted to Table" = Table.FromList(skiplist, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
    #"Renamed Columns" = Table.RenameColumns(#"Converted to Table",{{"Column1", "Skip"}}),
    #"Changed Type" = Table.TransformColumnTypes(#"Renamed Columns",{{"Skip", type text}}),
    fieldselect = "&$top=5000", // all fields with no expansion
    //fieldselect = "&$top=5000&$select = Id,Title,Person,Date", // list desired fields (no expansion)
    //fieldselect = "&$top=5000&$select = Id,Title,Person/LastName,Person/FirstName,Date&$expand = Person", //expand list fields
    #"Added Custom" = Table.AddColumn(#"Changed Type", "Items", each Json.Document(Web.Contents(baseurl& "/items?$skipToken=Paged=TRUE%26p_ID=" & [Skip] & fieldselect, [Headers=[Accept="application/json"]]))),
    #"Expanded Items" = Table.ExpandRecordColumn(#"Added Custom", "Items", {"value"}, {"value"}),
    #"Expanded value" = Table.ExpandListColumn(#"Expanded Items", "value")
    
in
    #"Expanded value"
